local map = vim.keymap.set
map("n", "<F5>", "<cmd>DapContinue<CR>", { desc = "Debug Start/Continue" })
map("n", "<F11>", "<cmd>DapStepInto<CR>", { desc = "Debug Step Into" })
map("n", "<F10>", "<cmd>DapStepOver<CR>", { desc = "Debug Step Over" })
map("n", "<S-F11>", "<cmd>DapStepOut<CR>", { desc = "Debug Step Out" })
map("n", "<S-F10>", function()
  require("dap").step_back()
end, { desc = "Debug Step Back" })
map("n", "<C-F5>", function()
  require("dap").run_last()
end, { desc = "Debug Restart" })
map("n", "<S-F5>", "<cmd>DapTerminate<CR>", { desc = "Debug Stop Debugging" })
map("n", "<F12>", "<cmd>DapDisconnect<CR>", { desc = "Debug Disconnect" })
map("n", "<F9>", "<cmd>DapToggleBreakpoint<CR>", { desc = "Debug Toggle Breakpoint" })
map("n", "<leader>bc", function()
  vim.ui.input({ prompt = "Break when expression evaluates to true: " }, function(exp)
    require("dap").set_breakpoint(exp)
  end)
end, { desc = "Debug Set Conditional Breakpoint (Expression)" })
map("n", "<leader>bh", function()
  vim.ui.input({ prompt = "Break when hit condition is met: " }, function(cond)
    require("dap").set_breakpoint(nil, cond)
  end)
end, { desc = "Debug Set Conditional Breakpoint (Hit Count)" })
map("n", "<leader>bl", function()
  vim.ui.input({ prompt = "Message to log when breakpoint is hit: " }, function(log)
    require("dap").set_breakpoint(nil, nil, log)
  end)
end, { desc = "Debug Set Conditional Breakpoint (Log Message)" })
